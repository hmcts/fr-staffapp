= form_for @form, as: :application, url: wizard_path, method: :put, html: { autocomplete: 'off' } do |f|

  header
    .row
      .small-12.medium-8.large-12.columns
        h2 Application details
  .row
    .small-12.medium-8.large-6.columns
      .form-group
        = f.label :fee
        = f.label :fee, @form.errors[:fee].join(', '), class: 'error' if @form.errors[:fee].present?
        .row.collapse
          .small-2.medium-3.large-3.columns
            span.prefix
              = f.label :fee, '£', class: 'inline'
          .small-10.medium-9.large-9.columns
            = f.text_field :fee, { value: "#{@form.fee.to_f.floor if @form.fee}", class: 'form-control small-field' }

      .form-group
        .row.collapse
          .columns.small-12
            = f.label :jurisdiction_id
            = f.label :jurisdiction_id, @form.errors[:jurisdiction_id].join(', '), class: 'error' if @form.errors[:jurisdiction_id].present?
            - if @jurisdictions.present?
              .options.radio
                =collection_radio_buttons(:application, :jurisdiction_id, @jurisdictions, :id, :display_full, include_hidden: true) do |b|
                  = b.label do
                    = b.radio_button(class: 'form-control', data: @form.jurisdiction_id)
                    = b.text
            - else
              = t('error_messages.jurisdictions.none_in_office')

      .form-group
        = f.label :date_received
        = f.label :date_received, @form.errors[:date_received].join(', '), class: 'error' if @form.errors[:date_received].present?
        = f.text_field :date_received, { class: 'form-control medium-field' }

      .form-group
        = f.label :form_name
          =t('activemodel.attributes.applikation/forms/application_detail.form_name')
          span.hint =t('general.optional').html_safe
        = f.label :form_name, @form.errors[:form_name].join(', '), class: 'error' if @form.errors[:form_name].present?
        = f.text_field :form_name, { class: 'form-control' }

      .form-group
        = f.label :case_number
          =t('activemodel.attributes.applikation/forms/application_detail.case_number')
          span.hint =t('general.optional').html_safe
        = f.label :case_number, @form.errors[:case_number].join(', '), class: 'error' if @form.errors[:case_number].present?
        = f.text_field :case_number, { class: 'form-control' }

      .form-group
        .options.radio
          .option
            = f.label :probate
              = f.check_box :probate, { class: 'show-hide-checkbox', data: { section: 'probate' } }
              = t('activemodel.attributes.applikation/forms/application_detail.probate')

      #probate-only.start-hidden
        .panel-indent
          .form-group
            = f.label :deceased_name
            = f.label :deceased_name, @form.errors[:deceased_name].join(', '), class: 'error' if @form.errors[:deceased_name].present?
            = f.text_field :deceased_name, { class: 'form-control' }

          .form-group
            = f.label :date_of_death
            = f.label :date_of_death, @form.errors[:date_of_death].join(', '), class: 'error' if @form.errors[:date_of_death].present?
            = f.text_field :date_of_death, { class: 'form-control' }
          
      .form-group
        .options.radio
          .option
            = f.label :refund
              = f.check_box :refund, { class: 'show-hide-checkbox', data: { section: 'refund' } }
              = t('activemodel.attributes.applikation/forms/application_detail.refund')

      #refund-only.start-hidden
        .form-group.panel-indent
          = f.label :date_fee_paid
          = f.label :date_fee_paid, @form.errors[:date_fee_paid].join(', '), class: 'error' if @form.errors[:date_fee_paid].present?
          = f.text_field :date_fee_paid, { class: 'form-control' }

      .form-group
        .options.radio
          .option
            = f.label :emergency
              = f.check_box :emergency, { class: 'show-hide-checkbox', data: { section: 'emergency' } }
              = t('activemodel.attributes.applikation/forms/application_detail.emergency')

      #emergency-only.start-hidden
        .form-group.panel-indent
          = f.label :emergency_reason
          = f.label :emergency_reason, @form.errors[:emergency_reason].join(', '), class: 'error' if @form.errors[:emergency_reason].present?
          = f.text_area :emergency_reason, { class: 'form-control' }

      = f.submit 'Next', class: 'button primary'
    
    #guidance.small-12.medium-4.large-5.columns
      .row
        #sidebar.small-12.columns
          h4 Refunds 
          span
          	strong Check the refund:
          ul
            li is for a fee paid less than 3 months ago
            li hasn't already been refunded
          p  = link_to 'What to do if fee was paid more than 3 months ago', guide_process_application_path(anchor: 'refunds'), target: 'blank'
          p 
          h4 Emergency cases
          p An emergency case is one where delay risks harm to the applicant or to the applicant’s case.
          span
          	strong Example of emergency cases:
          ul
          	li suspending an eviction
          	li debtor insolvency petition
          	li children or vulnerable adults
          	li domestic violence
          	li injunctions
          	li ‘out of hours’ provisions at the Royal Courts of Justice

          p  =link_to 'What to do if the application can’t be processed before the emergency application is heard', guide_process_application_path(anchor: 'emergency'), target: 'blank'
          p: strong= link_to 'See the guides', guide_path
